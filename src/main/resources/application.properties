server.port = 8810
spring.application.name = user-service

my.greeting=Hello
app.name = Microservice Session 3
app.description = Welcome to ${app.name}
#my.greeting.default=
my.list.value=Tasleem,Palak,Amit
my.map.value={Position:'SSE',Company:'ATCS'}

db.connection={Connection:'http://..',username:'demo',password:'demo'}
db.host=127.0.0.1
db.port=1200

#Go to same jar path, and execute command "vi application.properties". It will create new file parallel to jar file and we can edit it.
#Now we can edit its properties - my.greetings= Hello from external property file. Now run jar file it will pick new property from external file.
#:wq to exit from edit mode. External file will overwrite inner file.

#We can also overwrite any property by command line: java -jar userService.jar --my.greeting="Hello from command line"

management.endpoints.web.exposure.include=*

#spring.profiles.active: test

#@Profile("test") can be used on bean to be used environment specific beans

spring.cloud.config.uri=http://localhost:8888

#refresh using uri at runtime without restarting client server- localhost:8810/actuator/refresh

# this is gonna set logging level for the root of spring boot app. All of the logging level for whole project is gonna be set to trace
#while running this it will print lots of default logs as well, so set it back to info and specify log level to package names
#logging.level.root = TRACE 
logging.level.root = INFO
logging.level.com.demo = TRACE

#there are many other properties which we can set for logging.But if we specify all those , it will make this file heavy. so, there is xml configuration as well:
# Spring boot looks for certain xml files in classpath - logback-spring.xml/logback.xml . XML is verbose so we will use inheritable xml. look at logback-spring.xml file for example 
